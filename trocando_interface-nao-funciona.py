# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\Bot_whatsapp.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import getpass
import multiprocessing
import pandas as pd
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchWindowException
from time import sleep
from tkinter import filedialog
import tkinter as tk
import atexit
import math
import urllib
import sys
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Bot_whatsapp(object):
    def setupUi(self, Bot_whatsapp):
        print(bot.lista)
        Bot_whatsapp.setObjectName("Bot_whatsapp")
        Bot_whatsapp.resize(397, 294)
        self.verticalLayoutWidget = QtWidgets.QWidget(Bot_whatsapp)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 81, 51))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        # botão Iniciar
        self.iniciar = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.iniciar.setObjectName("iniciar")
        self.iniciar.clicked.connect(self.iniciar_bot)
        self.iniciar.setVisible(False)
        self.verticalLayout.addWidget(self.iniciar)
        

        # botão começar
        self.carregar = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.carregar.setObjectName("carregar")
        self.carregar.clicked.connect(wapp_bot.carregar)
        self.verticalLayout.addWidget(self.carregar)

        self.gridLayoutWidget = QtWidgets.QWidget(Bot_whatsapp)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(100, 10, 281, 241))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.lista = QtWidgets.QListWidget(self.gridLayoutWidget)
        self.lista.setObjectName("lista")
        ###### lista
        # item = QtWidgets.QListWidgetItem()
        # item.setCheckState(QtCore.Qt.Unchecked)
        # self.lista.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # item.setCheckState(QtCore.Qt.PartiallyChecked)
        # self.lista.addItem(item)
        # item = QtWidgets.QListWidgetItem()
        # item.setCheckState(QtCore.Qt.Checked)
        # self.lista.addItem(item)
        #######
        #######
        self.gridLayout.addWidget(self.lista, 0, 0, 1, 1)

        #barra de prograço
        self.barra_progress = QtWidgets.QProgressBar(Bot_whatsapp)
        self.barra_progress.setGeometry(QtCore.QRect(10, 260, 371, 23))
        self.barra_progress.setProperty("value", 78)
        self.barra_progress.setObjectName("barra_progress")
        self.barra_progress.setVisible(False)

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Bot_whatsapp)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 70, 81, 181))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.text_aviso = QtWidgets.QTextBrowser(self.verticalLayoutWidget_2)
        self.text_aviso.setObjectName("text_aviso")
        self.verticalLayout_2.addWidget(self.text_aviso)

        self.retranslateUi(Bot_whatsapp)
        QtCore.QMetaObject.connectSlotsByName(Bot_whatsapp)

    def retranslateUi(self, Bot_whatsapp):
        _translate = QtCore.QCoreApplication.translate
        Bot_whatsapp.setWindowTitle(_translate("Bot_whatsapp", "Dialog"))
        self.iniciar.setText(_translate("Bot_whatsapp", "Iniciar"))
        self.carregar.setText(_translate("Bot_whatsapp", "Carregar Plan."))
        __sortingEnabled = self.lista.isSortingEnabled()
        self.lista.setSortingEnabled(False)
        #######
        # item = self.lista.item(0)
        # item.setText(_translate("Bot_whatsapp", "sem marca"))
        # item = self.lista.item(1)
        # item.setText(_translate("Bot_whatsapp", "parcial marca"))
        # item = self.lista.item(2)
        # item.setText(_translate("Bot_whatsapp", "marcado"))
        ######
        contador = 0

        ######
        self.lista.setSortingEnabled(__sortingEnabled)
        self.text_aviso.setHtml(_translate("Bot_whatsapp", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        
    def iniciar_bot(self):
        pass
        #processo = multiprocessing.Process(target=wapp_bot.iniciar_wapp)
        #processo.start()



class Listar():
    def __init__(self):
        self.lista = []
        self.adicionado = False
    def alterar_lista(self, nova_lista = ["None", "Vazio"]):
        if self.adicionado == True:
            return
        self.adicionado = True
        for contar,linha in enumerate(nova_lista):
            print(linha)
            if linha == "":
                break
            item_const = QtWidgets.QListWidgetItem()
            item_const.setCheckState(QtCore.Qt.Unchecked)
            ui.lista.addItem(item_const)
            item = ui.lista.item(contar)
            item.setText(linha)

def alterar_lista(lista):
    contar = 0
    for dados in lista:
        if wapp_bot.primeira_lista == True:
            return
        item_const = QtWidgets.QListWidgetItem()
        item_const.setCheckState(QtCore.Qt.Unchecked)
        ui.lista.addItem(item_const)
        item = ui.lista.item(contar)
        item.setText(f"{dados[1]} - {dados[2]}")

        contar += 1


class Wapp_Bot():
    def __init__(self):
        self.iniciar()
        self.primeira_lista = False
    def iniciar(self):
        username = getpass.getuser()
        options = webdriver.ChromeOptions()
        options.add_argument(f"--user-data-dir=C:\\Users\\{username}\\AppData\\Local\\Google\\Chrome")
        self.navegador = webdriver.Chrome(options=options)
        link = f"https://web.whatsapp.com/"
        self.navegador.get(link)
        atexit.register(self.navegador.quit)

    def carregar(self):
        if self.is_browser_open() == False:
            ui.text_aviso.setText("O navegador foi fechado tente novamente")
            self.iniciar()

        caminho = self.procurar_arquivo()
        if caminho != "":
            if self.is_excel_file(caminho):
                ui.text_aviso.setText("")
                ui.carregar.setVisible(False)
                ui.iniciar.setVisible(True)
                self.dados = self.excel_load(caminho)
                alterar_lista(self.dados)
                
            else:
                self.infor("selecione apenas arquivos do excel",title="Erro")
        else:
            self.infor("nenhum arquivo selecionado tente novamente",title="Erro")

    def excel_load(self,planilha):
        try:
            colunas = "A,B,C,D"
            quantidade_colunas = len(colunas.replace(",",""))
            df = pd.read_excel(planilha, sheet_name='WhatsApp', usecols=colunas, skiprows=7).values.tolist()
            for x in df:
                x.insert(0,"preparado")
            return df
        except ValueError:
            ui.iniciar.setVisible(False)
            ui.carregar.setVisible(True)
            ui.text_aviso.setText("Planilha do excel invalida!")


    def is_browser_open(self):
        try:
            self.navegador.current_url
            return True
        except (NoSuchWindowException, NameError):
            return False
        
    def procurar_arquivo(self):
        root = tk.Tk()
        root.withdraw()
        caminho = filedialog.askopenfilename()
        return caminho

    def is_excel_file(self,file_path):
        return os.path.isfile(file_path) and file_path.lower().endswith(('.xls', '.xlsx', '.xlsm', '.xlsb'))
    

if __name__ == "__main__":
    multiprocessing.freeze_support()
    bot = Listar()
    wapp_bot = Wapp_Bot()
    app = QtWidgets.QApplication(sys.argv)
    Bot_whatsapp = QtWidgets.QDialog()
    ui = Ui_Bot_whatsapp()
    ui.setupUi(Bot_whatsapp)
    Bot_whatsapp.show()
    sys.exit(app.exec_())

    

    
